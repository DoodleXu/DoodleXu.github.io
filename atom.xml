<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lao&#39;s Blog</title>
  
  <subtitle>一个承载着梦的地方</subtitle>
  <link href="https://doodlexu.github.io/atom.xml" rel="self"/>
  
  <link href="https://doodlexu.github.io/"/>
  <updated>2021-05-15T00:22:38.154Z</updated>
  <id>https://doodlexu.github.io/</id>
  
  <author>
    <name>DoodleXu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DVWA入门靶场学习记录</title>
    <link href="https://doodlexu.github.io/posts/undefined/"/>
    <id>https://doodlexu.github.io/posts/undefined/</id>
    <published>2021-05-14T23:50:48.000Z</published>
    <updated>2021-05-15T00:22:38.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Brute-Force-暴力破解"><a href="#Brute-Force-暴力破解" class="headerlink" title="Brute Force 暴力破解"></a>Brute Force 暴力破解</h1><blockquote><p>爆破永远是最经典的，也是最有暴力美学的渗透方式。</p></blockquote><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment"># 获取用户名和密码</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询验证用户名和密码</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysql_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">      <span class="comment"># 输出头像和用户名</span></span><br><span class="line">      <span class="variable">$avatar</span> = mysql_result( <span class="variable">$result</span>, <span class="number">0</span>, <span class="string">&quot;avatar&quot;</span> );</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        登录失败</span><br><span class="line">    &#125;</span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题中的问题有很多，解法也不止一种。因为安全等级是Low，也就不考虑太多，这里记录一下两种解法：</p><ol><li>爆破（出题人推荐解法）</li><li>SQL注入</li></ol><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>这里我用的是<code>Hydra</code>来爆破，Hydra[ˈhaɪdrə]，原意九头蛇，是希腊神话中的怪兽。</p><p>参考命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l admin -P pass.txt -f 127.0.0.1 http-get-form <span class="string">&quot;/vulnerabilities/brute/:username=^USER^&amp;password=^PASS^&amp;Login=Login#:Username and/or password incorrect.:H=Cookie: 35l9io0j22ej6j6umvc3g561u6; security=low&quot;</span></span><br></pre></td></tr></table></figure><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><p>该难度下的爆破题并没有对用户输入项进行过滤，那么考虑最简单的<code>SQL注入</code>，万能密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39; or &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p>或者从URL注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username&#x3D;admin&#39;--+&amp;password&#x3D;111&amp;Login&#x3D;Login#</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Brute-Force-暴力破解&quot;&gt;&lt;a href=&quot;#Brute-Force-暴力破解&quot; class=&quot;headerlink&quot; title=&quot;Brute Force 暴力破解&quot;&gt;&lt;/a&gt;Brute Force 暴力破解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;爆</summary>
      
    
    
    
    <category term="知识" scheme="https://doodlexu.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="信息安全, 入门, 靶场" scheme="https://doodlexu.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8-%E5%85%A5%E9%97%A8-%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>对HDMI输出音量调节的一些看法</title>
    <link href="https://doodlexu.github.io/posts/59324/"/>
    <id>https://doodlexu.github.io/posts/59324/</id>
    <published>2021-03-11T14:10:46.000Z</published>
    <updated>2021-05-14T23:45:19.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>一次偶然的机会，在用macOS外接显示器的时候，用HDMI接口连接带音响的屏幕时，无法调节音量。显示<code>所选设备没有输出控制</code>。随即去找原因，本以为是Bug这么简单，没想到这居然还是个<code>feature</code>。</p><h1 id="背后的故事"><a href="#背后的故事" class="headerlink" title="背后的故事"></a>背后的故事</h1><p>首先<code>HDMI</code>全称叫高清多媒体接口（High Definition Multimedia Interface，HDMI）是一种全数字化视频和声音发送接口，可以发送未压缩的音频及视频信号。之所以他能出现上文所描述的现象，是因为 macOS 检测到你HDMI接口所连接的设备支持音频输出时，他会以<code>数字音频的方式输出</code>而不走 DAC（数模转换器），系统的音量控制好像只能是经过 DAC 出来的模拟信号来控制，而数字音频输出要保证信号的完整性，从而绕过了 DAC 所以不能调节音量。</p><p>其次，调节音量这个功能应该由功放来做，因为一旦调整了音量就说明系统已经改变了数字流，而不是“无损”音源了。并且许多情况使用HDMI作为输出的时候，可能不仅仅是往外放上接。这种情况如果要做进一步处理，就要尽量保证处理流程中的每一步都不能损失信息，这也是数字信号诞生的目的。用一种不太严谨的说法，数字信号本身人就不能被直接听到，后面要接 DAC 这样就会造成信号的失真。综上所述，造成信息损失的步骤应该放在最后一步，这也是macOS在HDMI输出音频信号时，无法调节音量的根本原因。</p><h1 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h1><p>在上述条件的基础上，我也找到了<code>特例</code>，那就是我们的视窗系统——Windows。它无视输出接口类型与协议。系统默认在输出前就过了一遍 DAC， 所以可以支持系统条件HDMI的音量。</p><h1 id="我的一些看法"><a href="#我的一些看法" class="headerlink" title="我的一些看法"></a>我的一些看法</h1><p>这件事情的一开始我也以为是macOS的Bug，在网上找方法，随即看到了<a href="https://www.v2ex.com/t/242238?p=2">V2EX</a>上的讨论, 才涨了见识。于是整理出这篇文章。不过很可惜的是，这篇帖子已经沦为了撕逼贴。正如上面的特例所描述那样，其实这两款系统的处理方式都没有错，并不至于撕出个谁对谁错。</p><p>出于用户的方便考虑，支持直接调节音量也挺好，毕竟需要无损音源的专业人员，和所有其他用户的数量比起来，音质好像也没那么重要了。</p><p>出于理性考虑，macOS的做法也是正确的。将有损步骤放到最后一步，以得到最佳音源。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;一次偶然的机会，在用macOS外接显示器的时候，用HDMI接口连接带音响的屏幕时，无法调节音量。显示&lt;code&gt;所选设备没有输出控制&lt;/co</summary>
      
    
    
    
    <category term="知识" scheme="https://doodlexu.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="HDMI, macOS， 音量， 数字音频" scheme="https://doodlexu.github.io/tags/HDMI-macOS%EF%BC%8C-%E9%9F%B3%E9%87%8F%EF%BC%8C-%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>reveal.js一个绝妙的Web演示文稿框架</title>
    <link href="https://doodlexu.github.io/posts/59324/"/>
    <id>https://doodlexu.github.io/posts/59324/</id>
    <published>2021-03-11T14:10:46.000Z</published>
    <updated>2021-05-14T23:37:46.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>🐦 鸽了。。。</p><p>找个时间补上。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主题&quot;&gt;&lt;a href=&quot;#主题&quot; class=&quot;headerlink&quot; title=&quot;主题&quot;&gt;&lt;/a&gt;主题&lt;/h1&gt;&lt;p&gt;🐦 鸽了。。。&lt;/p&gt;
&lt;p&gt;找个时间补上。。。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="知识" scheme="https://doodlexu.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="js, web框架" scheme="https://doodlexu.github.io/tags/js-web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>在Mac上配置密钥登陆Linux</title>
    <link href="https://doodlexu.github.io/posts/41005/"/>
    <id>https://doodlexu.github.io/posts/41005/</id>
    <published>2021-03-08T06:10:01.000Z</published>
    <updated>2021-03-08T07:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>在 Mac 上配置 SSH 密钥登录远程的 Linux</p></blockquote><h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><h2 id="创建本地的-SSH-密钥"><a href="#创建本地的-SSH-密钥" class="headerlink" title="创建本地的 SSH 密钥"></a>创建本地的 SSH 密钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&#x27;example@example.com&#x27;</span></span><br><span class="line">-t 指定密钥类型，默认即 rsa</span><br><span class="line">-C 设置注释文字，比如你的邮箱</span><br></pre></td></tr></table></figure><p>在配置过程中，可以根据提示设置<code>私钥</code>密码，我这里就不设置，默认为空，回车即可。</p><p>生成的密钥默认在<code>家目录</code>下的<code>.ssh</code>目录下</p><h2 id="上传公钥到远程-Linux-服务器"><a href="#上传公钥到远程-Linux-服务器" class="headerlink" title="上传公钥到远程 Linux 服务器"></a>上传公钥到远程 Linux 服务器</h2><p>使用 scp 复制公钥到远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P &lt;端口号&gt; ~/.ssh/id_rsa.pub &lt;用户名&gt;@&lt;ip地址&gt;:/home/id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="配置远程-Linux-的私钥"><a href="#配置远程-Linux-的私钥" class="headerlink" title="配置远程 Linux 的私钥"></a>配置远程 Linux 的私钥</h2><p>登录远程 Linux 服务器，把公钥追加到服务器 ssh 认证文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>如果在 家目录 没有 .ssh 目录或 authorized_keys 文件，可以创建一下，并授予 authorized_keys 文件 600 权限</p><p>然后在执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h2 id="创建配置文件快速登录"><a href="#创建配置文件快速登录" class="headerlink" title="创建配置文件快速登录"></a>创建配置文件快速登录</h2><p>每次登录都需要输入用户名和地址，这样也是太麻烦，可以添加配置文件，使用<code>别名</code>来登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">% vi ~/.ssh/config</span><br><span class="line">Host            <span class="built_in">alias</span>            <span class="comment">#自定义别名</span></span><br><span class="line">HostName        0.0.0.0          <span class="comment">#替换为你的ssh服务器ip或domain</span></span><br><span class="line">Port            22               <span class="comment">#ssh服务器端口，默认为22</span></span><br><span class="line">User            root             <span class="comment">#ssh服务器用户名</span></span><br><span class="line">IdentityFile    ~/.ssh/id_rsa    <span class="comment">#第一个步骤生成的公钥文件对应的私钥文件</span></span><br></pre></td></tr></table></figure><p>此时就可以使用 ssh进行登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="built_in">alias</span></span><br></pre></td></tr></table></figure><h2 id="禁止-Linux-使用账号密码登录"><a href="#禁止-Linux-使用账号密码登录" class="headerlink" title="禁止 Linux 使用账号密码登录"></a>禁止 Linux 使用账号密码登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">cd</span> /etc/ssh/ &amp; vi sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># sshd_config:</span></span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br><span class="line"><span class="comment">#AuthorizedKeysCommand none</span></span><br><span class="line"><span class="comment">#AuthorizedKeysCommandRunAs nobody</span></span><br><span class="line"><span class="comment">#默认PasswordAuthentication 为yes,即允许密码登录，改为no后，禁止密码登录</span></span><br><span class="line">PasswordAuthentication no</span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line">% systemctl restart sshd.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在 Mac 上配置 SSH 密钥登录远程的 Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;相关配</summary>
      
    
    
    
    <category term="技术" scheme="https://doodlexu.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Mac, Linux, SSH" scheme="https://doodlexu.github.io/tags/Mac-Linux-SSH/"/>
    
  </entry>
  
  <entry>
    <title>利用Python快速批量生成文件夹</title>
    <link href="https://doodlexu.github.io/posts/4099/"/>
    <id>https://doodlexu.github.io/posts/4099/</id>
    <published>2021-03-04T12:34:13.000Z</published>
    <updated>2021-03-08T07:21:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="灵感由来"><a href="#灵感由来" class="headerlink" title="灵感由来"></a>灵感由来</h1><p>由于疫情原因，学校要求开学时收集各班各学生的健康码以及通行证，并以学生姓名建立文件夹保存。于是产生了此需求（批量建立文件夹）。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>将花名册上所有名字写入一个数组，遍历该数组，并利用<code>os</code>模块生成对应文件夹。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file_path = os.path.abspath(<span class="string">r&quot;/Users/doodlexu/Stu_Card/&quot;</span>)</span><br><span class="line"></span><br><span class="line">Stu_Name = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Stu_Name:</span><br><span class="line">    file_name = file_path + <span class="string">&quot;/&quot;</span> + i</span><br><span class="line">    os.makedirs(file_name)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;灵感由来&quot;&gt;&lt;a href=&quot;#灵感由来&quot; class=&quot;headerlink&quot; title=&quot;灵感由来&quot;&gt;&lt;/a&gt;灵感由来&lt;/h1&gt;&lt;p&gt;由于疫情原因，学校要求开学时收集各班各学生的健康码以及通行证，并以学生姓名建立文件夹保存。于是产生了此需求（批量建立文件夹）</summary>
      
    
    
    
    <category term="Code" scheme="https://doodlexu.github.io/categories/Code/"/>
    
    
    <category term="Code" scheme="https://doodlexu.github.io/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记</title>
    <link href="https://doodlexu.github.io/posts/45350/"/>
    <id>https://doodlexu.github.io/posts/45350/</id>
    <published>2021-03-03T07:05:16.000Z</published>
    <updated>2021-05-14T23:46:14.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java笔记"><a href="#Java笔记" class="headerlink" title="Java笔记"></a>Java笔记</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[];   <span class="comment">// 首选的方法</span></span><br><span class="line">dataType arrayRefVar[] = <span class="keyword">new</span> dataType[];   <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><h3 id="获得行数和列数"><a href="#获得行数和列数" class="headerlink" title="获得行数和列数"></a>获得行数和列数</h3><h4 id="行数"><a href="#行数" class="headerlink" title="行数"></a>行数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] array = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> row = array.lengh;      <span class="comment">//行数</span></span><br><span class="line"><span class="keyword">int</span> col = array[<span class="number">0</span>].lengh;   <span class="comment">//列数</span></span><br></pre></td></tr></table></figure><h4 id="快速输出数组元素"><a href="#快速输出数组元素" class="headerlink" title="快速输出数组元素"></a>快速输出数组元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] array = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(Arrays.deepToString(array));  <span class="comment">//打印该数组的每一个元素</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="取子串"><a href="#取子串" class="headerlink" title="取子串"></a>取子串</h3><h4 id="从指定位置截取到末尾"><a href="#从指定位置截取到末尾" class="headerlink" title="从指定位置截取到末尾"></a>从指定位置截取到末尾</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">String sub = string.substring(<span class="number">3</span>); <span class="comment">//&quot;defg&quot;</span></span><br></pre></td></tr></table></figure><h4 id="指定位置截取子串"><a href="#指定位置截取子串" class="headerlink" title="指定位置截取子串"></a>指定位置截取子串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">String sub = string.substring(<span class="number">2</span>,<span class="number">4</span>), <span class="comment">//&quot;cde&quot;</span></span><br></pre></td></tr></table></figure><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="BufferedReader-和-Scanner-的用法和区别"><a href="#BufferedReader-和-Scanner-的用法和区别" class="headerlink" title="BufferedReader 和 Scanner 的用法和区别"></a>BufferedReader 和 Scanner 的用法和区别</h3><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));  <span class="comment">//创建一个BufferedReader对象</span></span><br></pre></td></tr></table></figure><p>BufferedReader 对象创建后，我们便可以使用 **read() **方法从控制台读取一个字符，或者用 **readLine() **方法读取一个字符串。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">c = (<span class="keyword">char</span>) br.read();  <span class="comment">//读取字符</span></span><br><span class="line">String str;</span><br><span class="line">str = br.readline();   <span class="comment">//读取字符串</span></span><br></pre></td></tr></table></figure><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// next方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;next方式接收：&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNext()) &#123;</span><br><span class="line">            String str1 = scan.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为：&quot;</span> + str1);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// nextLine方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;nextLine方式接收：&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextLine()) &#123;</span><br><span class="line">            String str2 = scan.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为：&quot;</span> + str2);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="next-与-nextLine-区别"><a href="#next-与-nextLine-区别" class="headerlink" title="next() 与 nextLine() 区别"></a>next() 与 nextLine() 区别</h5><p><strong>next():</strong></p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。 </li><li>next() 不能得到带有空格的字符串。</li></ul><p><strong>nextLine() ：</strong></p><ul><li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。 </li><li>2、可以获得空白。</li></ul><p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;输入整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextInt()) &#123;</span><br><span class="line">            <span class="comment">// 判断输入的是否是整数</span></span><br><span class="line">            i = scan.nextInt();</span><br><span class="line">            <span class="comment">// 接收整数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span> + i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 输入错误的信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是整数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;输入小数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextFloat()) &#123;</span><br><span class="line">            <span class="comment">// 判断输入的是否是小数</span></span><br><span class="line">            f = scan.nextFloat();</span><br><span class="line">            <span class="comment">// 接收小数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span> + f);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 输入错误的信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是小数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="super方法"><a href="#super方法" class="headerlink" title="super方法"></a>super方法</h3><blockquote><p>super是指向父类的引用，如果构造方法没有显示地调用父类的构造方法，那么编译器会自动为它加上一个默认的super()方法调用。如果父类由没有默认的无参构造方法，编译器就会报错，super()语句必须是构造方法的第一个子句。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java笔记&quot;&gt;&lt;a href=&quot;#Java笔记&quot; class=&quot;headerlink&quot; title=&quot;Java笔记&quot;&gt;&lt;/a&gt;Java笔记&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Code" scheme="https://doodlexu.github.io/categories/Code/"/>
    
    
    <category term="Code" scheme="https://doodlexu.github.io/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>iPhone 12</title>
    <link href="https://doodlexu.github.io/posts/55027/"/>
    <id>https://doodlexu.github.io/posts/55027/</id>
    <published>2020-12-10T10:47:00.000Z</published>
    <updated>2021-03-03T07:05:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说声抱歉"><a href="#先说声抱歉" class="headerlink" title="先说声抱歉"></a>先说声抱歉</h1><p>由于拿到的当天，正在上课，猴急的<code>唠唠</code>在课堂上，在同学们的众目睽睽之下，开箱了iPhone 12。出于太过匆忙，没来得及拍开箱视频和照片，所以只能在用了一阵子之后的今天，给大家补图，顺便简单介绍一下iPhone 12的使用体验。</p><h1 id="实拍图"><a href="#实拍图" class="headerlink" title="实拍图"></a>实拍图</h1><p><img src="https://img.laoooo.cn:88/2020/12/10/48cd90b3a532b.jpg" alt="Shot By iPhone 11"><br><img src="https://img.laoooo.cn:88/2020/12/10/d1db14af9a1f0.jpg" alt="Shot By iPhone 11"><br><img src="https://img.laoooo.cn:88/2020/12/10/319f75ca183bb.jpg" alt="iPhone 12 拍摄样张"></p><h1 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h1><h2 id="5G"><a href="#5G" class="headerlink" title="5G"></a>5G</h2><p>由于<code>家境贫寒</code>,用不起5G。但是我发现4G卡也是可以用5G信号的，经过测试，4G卡在5G模式下有着比纯4G更好的信号质量以及更高的带宽，基本可以达到4G的理论峰值。所以，得出结论：5G手机＋4G套餐 = 更好的4G体验（狗头）</p><p><img src="https://img.laoooo.cn:88/2020/12/10/b753462aaa527.png" alt="4G套餐+5G信号下的测速"></p><h2 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h2><p>抛开同步数据的磨合使用规律的那两天，续航的表现基本为轻度使用可以做到1.5到两天一充， 游戏画质全满的情况下掉电速度较快。以<code>4k 60帧</code>的画质，刷街一下午还能剩个<code>22%</code>左右的电量。实际拍摄的素材大小为22G左右。</p><p>在夜间充满电后待机，一整晚下来基本不掉电，总体来看符合基本的预期，甚至有点超越预期水平。</p><h1 id="直角机身"><a href="#直角机身" class="headerlink" title="直角机身"></a>直角机身</h1><p>手感的确类似祖师爷<code>5S</code>, 有一种我在用<code>iPhone 5s Super Plus</code>的感觉。后盖玻璃是名副其实的指纹收集器，这个没得说，但好在手感确实挺不错。</p><h1 id="杜比音效和杜比视界"><a href="#杜比音效和杜比视界" class="headerlink" title="杜比音效和杜比视界"></a>杜比音效和杜比视界</h1><p>这里强烈表扬一下这代的扬声器和屏幕，在观看带有<a href="https://c.laoooo.cn:88/index.php?share/file&user=1&sid=thnqjeZM">Dolby Atom</a>的视频时，双扬声器的体验妙不可言，在安静的环境中，其体验凭我个人的感受来说，我觉得可以用“影院级”体验来描述它。与其相比，HDR虽然也很不错，但没有杜比音效这么直观的感受。</p><h1 id="NFC-与-城市交通"><a href="#NFC-与-城市交通" class="headerlink" title="NFC 与 城市交通"></a>NFC 与 城市交通</h1><p><code>Apple Pay</code>现在支持<strong>交通联合</strong>，目前我了解到的支持全国通用的交通卡有<code>北京市政一卡通</code>，在长沙还有<code>潇湘卡</code>，这里不多介绍了。结合云闪付的活动，在今年的12月结束前，每天有两次一分钱搭公交的机会，虽然说是每日限量，但好像目前知道的人并不多，所以目前可以放心刷<code>手动狗头</code>。</p><p><img src="https://img.laoooo.cn:88/2020/12/10/bfb4cfa7cbae9.png" alt="一分钱公交"><br><img src="https://img.laoooo.cn:88/2020/12/10/253da5f4c6f98.png" alt="Apple Pay的卡片们"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上仅代表个人观点，且为本人直观感受，最终体验以您的为准（再次狗头）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说声抱歉&quot;&gt;&lt;a href=&quot;#先说声抱歉&quot; class=&quot;headerlink&quot; title=&quot;先说声抱歉&quot;&gt;&lt;/a&gt;先说声抱歉&lt;/h1&gt;&lt;p&gt;由于拿到的当天，正在上课，猴急的&lt;code&gt;唠唠&lt;/code&gt;在课堂上，在同学们的众目睽睽之下，开箱了iPhone </summary>
      
    
    
    
    <category term="Devices" scheme="https://doodlexu.github.io/categories/Devices/"/>
    
    
    <category term="Devices" scheme="https://doodlexu.github.io/tags/Devices/"/>
    
  </entry>
  
  <entry>
    <title>IP地址</title>
    <link href="https://doodlexu.github.io/posts/28940/"/>
    <id>https://doodlexu.github.io/posts/28940/</id>
    <published>2020-12-08T04:22:00.000Z</published>
    <updated>2021-03-03T07:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><blockquote><p>IP地址（英语：IP Address，全称Internet Protocol Address），又译为网际协议地址、互联网协议地址。当设备连接网络，设备将被分配一个IP地址，用作标识。通过IP地址，设备间可以互相通讯，如果没有IP地址，我们将无法知道哪个设备是发送方，无法知道哪个是接收方。IP地址有两个主要功能：标识设备或网络 和 寻址（英语：location addressing）。<br>常见的IP地址分为 IPv4 与 IPv6 两大类，IP地址由一串数字组成。IPv4 由十进制数字组成，并以点分隔，如：172.16.254.1； IPv6 由十六进制数字组成，以冒号分割，如：2001:db8:0:1234:0:567:8:1。</p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p><strong>IP地址有两个主要的功能：</strong></p><p>标识主机。更具体地说，标识其网络接口，并且提供主机在网络中的位置。<br>网络寻址 ， 网际协议（缩写：IP）的一个重要机制就是网络寻址（英语：internet address）。该功能的目的是将 数据报 从一个网络模块 送到 目的地。在发送的整个过程，IP地址（address）充当着目的地的位置，域名（name）意味着我们要找什么，路由（route）代表着如何到达目的地的这个过程。每个IP数据包的标头包含了发送主机的IP地址和目的主机的IP地址。</p><h2 id="子网"><a href="#子网" class="headerlink" title="子网"></a>子网</h2><p>IP网络可以在<code>IPv4</code>和<code>IPv6</code>中划分子网。为此，将IP地址识别成由两部分组成：网络前缀（高位）和其余的位（称为其余字段，主机标识符或者接口标识符（IPv6）），用于网络内的主机编号。子网掩码（subnet mask）或无类别域间路由（英语：Classless Inter-Domain Routing，简称：CIDR）表示法确定了IP地址如何分为网络部分和主机部分。</p><p>子网掩码一词仅用于IPv4地址中。但是，两个版本的IP地址都使用CIDR概念和符号。在此，在IP地址后面加斜杠和用于标识网络部分的位数（十进制），也称路由前缀。例如：IPv4地址及其子网掩码分别可以是 192.0.2.1 和 255.255.255.0 。因为IP地址的前24位表示网络和子网，所以相同的IP地址和子网的CIDR表示法为192.0.2.1/24。</p><h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p>网关(gateway)其作用为NAT(网络地址转换)和转发客户端与其他服务器通信的数据。举个不严谨的例子：如果将局域网看作是一个小区, 那么网关就是小区的门卫。如果在快递中, 他也有着类似于<code>分拨中心</code>的作用。</p><h2 id="公网IP-amp-私网IP"><a href="#公网IP-amp-私网IP" class="headerlink" title="公网IP &amp; 私网IP"></a>公网IP &amp; 私网IP</h2><p>公网IP就是可以在互联网上直接寻址, 无需进行<em>转换</em>。因此, 拿我们现实生活举例子, 比如你想找一个叫徐小唠的朋友, 他家的地址是: <code>北京市 朝阳区 针织路23号楼 xxx号</code>。那么, <code>北京市</code>就是一个公网地址, 因为世界上就一个北京市, 放在哪我们都知道他是在中国, 是咱们的首都。而<code>朝阳区 针织路 23号楼 xxx号</code>就是一个私网地址, 因为世界上可能不止一个朝阳区, 同名的道路更是数不胜数。</p><h2 id="数据包的投递"><a href="#数据包的投递" class="headerlink" title="数据包的投递"></a>数据包的投递</h2><p>接着楼上的例子, 假如你需要和你的朋友徐小唠通信, 此时我们将数据包以一封信代替。那么这封信(数据包)你写好后, 写上地址(IP地址)就寄出了, 你完全不用管他会走那条路(路由选择), 通过什么交通工具(数据通信设备, 如交换机、路由器等)。</p><p>你只管投递到邮筒(网卡)里, 这个时候, 邮差小哥取到了你的信, 就去问门卫(网关)这是哪个小区, 并把你小区的地址和门牌号(私有地址)换成了较大的地域名称(公网地址), 而以上换地址的过程, 我们称之为网络地址转换(NAT)。</p><p>接下来, 邮差小哥把你的信带到了分拨中心(路由器), 由于分拨中心每天要处理海量的数据, 所以他只会随便瞟一眼你的目的地址(目标的公网IP), 就给你扔到发往北京的车上了。</p><p>镜头一转, 我们的小哥已经把车开到了北京了。这个时候大的地址已经不管用了, 毕竟也没谁的家叫北京。这个时候小哥就开始拆开第一层包裹, 找到了二级地址朝阳区, 于是你的信就被发往了朝阳区分拨中心(目的网络的路由器), 人家看了眼, “针织路的包裹啊, 那个小刘, 你给送过去吧” “好嘞!”, 小刘屁颠屁颠就给你送到了徐小唠的小区(交换机)了, 并交给了徐小唠小区的门卫。 人保安看了一眼, 徐小唠(MAC)的包裹啊, 这我熟, 转眼就给送到了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IP地址&quot;&gt;&lt;a href=&quot;#IP地址&quot; class=&quot;headerlink&quot; title=&quot;IP地址&quot;&gt;&lt;/a&gt;IP地址&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;IP地址（英语：IP Address，全称Internet Protocol Address），又</summary>
      
    
    
    
    <category term="知识" scheme="https://doodlexu.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="IP地址" scheme="https://doodlexu.github.io/tags/IP%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
</feed>
