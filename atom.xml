<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lao&#39;s Blog</title>
  
  <subtitle>一个承载着梦的地方</subtitle>
  <link href="https://doodlexu.github.io/atom.xml" rel="self"/>
  
  <link href="https://doodlexu.github.io/"/>
  <updated>2021-03-02T14:51:32.799Z</updated>
  <id>https://doodlexu.github.io/</id>
  
  <author>
    <name>DoodleXu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://doodlexu.github.io/posts/16107/"/>
    <id>https://doodlexu.github.io/posts/16107/</id>
    <published>2021-03-02T04:29:43.332Z</published>
    <updated>2021-03-02T14:51:32.799Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java笔记</title>
    <link href="https://doodlexu.github.io/posts/45350/"/>
    <id>https://doodlexu.github.io/posts/45350/</id>
    <published>2021-02-26T03:35:10.167Z</published>
    <updated>2021-03-03T02:51:21.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java笔记"><a href="#Java笔记" class="headerlink" title="Java笔记"></a>Java笔记</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[];   <span class="comment">// 首选的方法</span></span><br><span class="line">dataType arrayRefVar[] = <span class="keyword">new</span> dataType[];   <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><h3 id="获得行数和列数"><a href="#获得行数和列数" class="headerlink" title="获得行数和列数"></a>获得行数和列数</h3><h4 id="行数"><a href="#行数" class="headerlink" title="行数"></a>行数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] array = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> row = array.lengh;      <span class="comment">//行数</span></span><br><span class="line"><span class="keyword">int</span> col = array[<span class="number">0</span>].lengh;   <span class="comment">//列数</span></span><br></pre></td></tr></table></figure><h4 id="快速输出数组元素"><a href="#快速输出数组元素" class="headerlink" title="快速输出数组元素"></a>快速输出数组元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] array = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(Arrays.deepToString(array));  <span class="comment">//打印该数组的每一个元素</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="取子串"><a href="#取子串" class="headerlink" title="取子串"></a>取子串</h3><h4 id="从指定位置截取到末尾"><a href="#从指定位置截取到末尾" class="headerlink" title="从指定位置截取到末尾"></a>从指定位置截取到末尾</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">String sub = string.substring(<span class="number">3</span>); <span class="comment">//&quot;defg&quot;</span></span><br></pre></td></tr></table></figure><h4 id="指定位置截取子串"><a href="#指定位置截取子串" class="headerlink" title="指定位置截取子串"></a>指定位置截取子串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">String sub = string.substring(<span class="number">2</span>,<span class="number">4</span>), <span class="comment">//&quot;cde&quot;</span></span><br></pre></td></tr></table></figure><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="BufferedReader-和-Scanner-的用法和区别"><a href="#BufferedReader-和-Scanner-的用法和区别" class="headerlink" title="BufferedReader 和 Scanner 的用法和区别"></a>BufferedReader 和 Scanner 的用法和区别</h3><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));  <span class="comment">//创建一个BufferedReader对象</span></span><br></pre></td></tr></table></figure><p>BufferedReader 对象创建后，我们便可以使用 **read() **方法从控制台读取一个字符，或者用 **readLine() **方法读取一个字符串。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">c = (<span class="keyword">char</span>) br.read();  <span class="comment">//读取字符</span></span><br><span class="line">String str;</span><br><span class="line">str = br.readline();   <span class="comment">//读取字符串</span></span><br></pre></td></tr></table></figure><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// next方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;next方式接收：&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNext()) &#123;</span><br><span class="line">            String str1 = scan.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为：&quot;</span> + str1);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// nextLine方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;nextLine方式接收：&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextLine()) &#123;</span><br><span class="line">            String str2 = scan.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为：&quot;</span> + str2);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="next-与-nextLine-区别"><a href="#next-与-nextLine-区别" class="headerlink" title="next() 与 nextLine() 区别"></a>next() 与 nextLine() 区别</h5><p><strong>next():</strong></p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。 </li><li>next() 不能得到带有空格的字符串。</li></ul><p><strong>nextLine() ：</strong></p><ul><li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。 </li><li>2、可以获得空白。</li></ul><p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;输入整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextInt()) &#123;</span><br><span class="line">            <span class="comment">// 判断输入的是否是整数</span></span><br><span class="line">            i = scan.nextInt();</span><br><span class="line">            <span class="comment">// 接收整数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span> + i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 输入错误的信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是整数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;输入小数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextFloat()) &#123;</span><br><span class="line">            <span class="comment">// 判断输入的是否是小数</span></span><br><span class="line">            f = scan.nextFloat();</span><br><span class="line">            <span class="comment">// 接收小数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span> + f);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 输入错误的信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是小数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="super方法"><a href="#super方法" class="headerlink" title="super方法"></a>super方法</h3><blockquote><p>super是指向父类的引用，如果构造方法没有显示地调用父类的构造方法，那么编译器会自动为它加上一个默认的super()方法调用。如果父类由没有默认的无参构造方法，编译器就会报错，super()语句必须是构造方法的第一个子句。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java笔记&quot;&gt;&lt;a href=&quot;#Java笔记&quot; class=&quot;headerlink&quot; title=&quot;Java笔记&quot;&gt;&lt;/a&gt;Java笔记&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Code" scheme="https://doodlexu.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>iphone12</title>
    <link href="https://doodlexu.github.io/posts/55027/"/>
    <id>https://doodlexu.github.io/posts/55027/</id>
    <published>2020-12-10T10:47:00.000Z</published>
    <updated>2021-03-03T07:03:36.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说声抱歉"><a href="#先说声抱歉" class="headerlink" title="先说声抱歉"></a>先说声抱歉</h1><p>由于拿到的当天，正在上课，猴急的<code>唠唠</code>在课堂上，在同学们的众目睽睽之下，开箱了iPhone 12。出于太过匆忙，没来得及拍开箱视频和照片，所以只能在用了一阵子之后的今天，给大家补图，顺便简单介绍一下iPhone 12的使用体验。</p><h1 id="实拍图"><a href="#实拍图" class="headerlink" title="实拍图"></a>实拍图</h1><p><img src="https://img.laoooo.cn:88/2020/12/10/48cd90b3a532b.jpg" alt="Shot By iPhone 11"><br><img src="https://img.laoooo.cn:88/2020/12/10/d1db14af9a1f0.jpg" alt="Shot By iPhone 11"><br><img src="https://img.laoooo.cn:88/2020/12/10/319f75ca183bb.jpg" alt="iPhone 12 拍摄样张"></p><h1 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h1><h2 id="5G"><a href="#5G" class="headerlink" title="5G"></a>5G</h2><p>由于<code>家境贫寒</code>,用不起5G。但是我发现4G卡也是可以用5G信号的，经过测试，4G卡在5G模式下有着比纯4G更好的信号质量以及更高的带宽，基本可以达到4G的理论峰值。所以，得出结论：5G手机＋4G套餐 = 更好的4G体验（狗头）</p><p><img src="https://img.laoooo.cn:88/2020/12/10/b753462aaa527.png" alt="4G套餐+5G信号下的测速"></p><h2 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h2><p>抛开同步数据的磨合使用规律的那两天，续航的表现基本为轻度使用可以做到1.5到两天一充， 游戏画质全满的情况下掉电速度较快。以<code>4k 60帧</code>的画质，刷街一下午还能剩个<code>22%</code>左右的电量。实际拍摄的素材大小为22G左右。</p><p>在夜间充满电后待机，一整晚下来基本不掉电，总体来看符合基本的预期，甚至有点超越预期水平。</p><h1 id="直角机身"><a href="#直角机身" class="headerlink" title="直角机身"></a>直角机身</h1><p>手感的确类似祖师爷<code>5S</code>, 有一种我在用<code>iPhone 5s Super Plus</code>的感觉。后盖玻璃是名副其实的指纹收集器，这个没得说，但好在手感确实挺不错。</p><h1 id="杜比音效和杜比视界"><a href="#杜比音效和杜比视界" class="headerlink" title="杜比音效和杜比视界"></a>杜比音效和杜比视界</h1><p>这里强烈表扬一下这代的扬声器和屏幕，在观看带有<a href="https://c.laoooo.cn:88/index.php?share/file&user=1&sid=thnqjeZM">Dolby Atom</a>的视频时，双扬声器的体验妙不可言，在安静的环境中，其体验凭我个人的感受来说，我觉得可以用“影院级”体验来描述它。与其相比，HDR虽然也很不错，但没有杜比音效这么直观的感受。</p><h1 id="NFC-与-城市交通"><a href="#NFC-与-城市交通" class="headerlink" title="NFC 与 城市交通"></a>NFC 与 城市交通</h1><p><code>Apple Pay</code>现在支持<strong>交通联合</strong>，目前我了解到的支持全国通用的交通卡有<code>北京市政一卡通</code>，在长沙还有<code>潇湘卡</code>，这里不多介绍了。结合云闪付的活动，在今年的12月结束前，每天有两次一分钱搭公交的机会，虽然说是每日限量，但好像目前知道的人并不多，所以目前可以放心刷<code>手动狗头</code>。</p><p><img src="https://img.laoooo.cn:88/2020/12/10/bfb4cfa7cbae9.png" alt="一分钱公交"><br><img src="https://img.laoooo.cn:88/2020/12/10/253da5f4c6f98.png" alt="Apple Pay的卡片们"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上仅代表个人观点，且为本人直观感受，最终体验以您的为准（再次狗头）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说声抱歉&quot;&gt;&lt;a href=&quot;#先说声抱歉&quot; class=&quot;headerlink&quot; title=&quot;先说声抱歉&quot;&gt;&lt;/a&gt;先说声抱歉&lt;/h1&gt;&lt;p&gt;由于拿到的当天，正在上课，猴急的&lt;code&gt;唠唠&lt;/code&gt;在课堂上，在同学们的众目睽睽之下，开箱了iPhone </summary>
      
    
    
    
    
    <category term="Devices" scheme="https://doodlexu.github.io/tags/Devices/"/>
    
  </entry>
  
</feed>
